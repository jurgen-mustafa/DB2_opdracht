WEBVTT

00:00:01.046 --> 00:00:02.068
wat zien we hier?

00:00:02.093 --> 00:00:05.653
dus voor de vraag die gesteld was

00:00:12.262 --> 00:00:15.743
dus geef voor elk album 
de 2 langste nummers

00:00:15.929 --> 00:00:17.196
we gaan op zoek

00:00:18.043 --> 00:00:20.376
naar de performant mogelijkste query

00:00:20.777 --> 00:00:22.677
dus dat wilt zeggen

00:00:22.923 --> 00:00:25.089
voor die eerste oplossing
die we daar hebben

00:00:26.629 --> 00:00:28.962
kijken we naar deze cost

00:00:28.996 --> 00:00:30.185
dus dan zie je eigenlijk

00:00:30.346 --> 00:00:34.009
als je het moet samenvatten in een getal
kijk je altijd naar de bovenste lijn

00:00:34.042 --> 00:00:36.453
er waren een aantal studenten die 
dat daarstraks vroegen

00:00:36.630 --> 00:00:39.518
dus de bovenste lijn geeft
de samenvatting van het heel queryplan

00:00:39.685 --> 00:00:44.296
het queryplan is hetgeen wat de planner/
de opimizer intern heeft beslist van

00:00:44.318 --> 00:00:49.883
met de hardware &amp; geheugen die ik heb
met hetgeen dat ik weet van de tabel

00:00:50.038 --> 00:00:54.293
is dit volgens mij de beste manier om 
deze query uit te voeren

00:00:54.436 --> 00:00:56.122
dus hij omschrijft dat hier

00:00:56.581 --> 00:00:58.871
het belangrijkste getal hier is 
het laatste getal

00:00:59.044 --> 00:01:01.658
dus die 5700 wilt zeggen

00:01:01.892 --> 00:01:04.208
das de kostprijs om alle data te tonen

00:01:04.472 --> 00:01:10.115
en die 16 is de kostprijs om 
de eerste rij te tonen

00:01:10.527 --> 00:01:12.911
daarstraks waren er mensen
dus das kostprijzen

00:01:12.970 --> 00:01:15.665
Je kan alleen maar kostprijzen vergelijken
op dezelfde databank

00:01:15.709 --> 00:01:19.582
omdat die ook afhankelijk zijn van parameters 
die je kan instellen op u databank

00:01:20.287 --> 00:01:22.371
dus dan je natuurlijk gaan kijken van
ja maar ja

00:01:23.194 --> 00:01:25.510
ik wil ook de tijd tonen

00:01:25.699 --> 00:01:29.455
wie weet nog de optie dat je
effectief die query gaat uitvoeren?

00:01:29.691 --> 00:01:32.018
dat je de tijd ook toont
bij die explain?

00:01:35.810 --> 00:01:38.048
ja indeerdaad Arthur
analyze

00:01:40.706 --> 00:01:43.522
dus dan krijg je een idee van de tijd

00:01:43.696 --> 00:01:47.534
wat dat we hier zijn is dat de tijd 
eigenlijk vrij snel is

00:01:47.674 --> 00:01:50.234
dus dat is hier 11 miliseconden

00:01:51.368 --> 00:01:53.391
ik denk dat alles onder...

00:01:55.054 --> 00:02:00.304
onze ogen werken bijvoorbeeld als je naar
film kijkt dan 30 frames per seconde

00:02:01.803 --> 00:02:06.510
dus als het een duizend miliseconden zijn
we delen dat door 30

00:02:07.050 --> 00:02:08.750
en zelfs 20 frames zou ik zeggen

00:02:08.984 --> 00:02:12.086
alles onder de 50 miliseconden is eigenlijk
voor onze ogen

00:02:12.115 --> 00:02:14.271
dus dan komt het resultaat 
nog altijd heel snel

00:02:14.296 --> 00:02:16.363
al hetgeen dat onder de 50 miliseconde is

00:02:16.388 --> 00:02:19.314
dus opzich is die query aanvaardbaar met
de data dat daarin staat

00:02:19.436 --> 00:02:22.861
het is niet dat het zegt 
"je hebt hier een optimalizatieprobleem"

00:02:25.142 --> 00:02:26.314
wat zien we hier nog?

00:02:26.778 --> 00:02:28.876
we zien hier bijvoorbeeld
dat de planner

00:02:29.151 --> 00:02:34.238
heeft 0.2 miliseconden nodig afgerond
en het effectieve uitvoeren is

00:02:34.367 --> 00:02:38.161
die 11 miliseconden dus we komen samen
aan 12 miliseconden ongeveer

00:02:39.030 --> 00:02:40.920
dus een query die efficient genoeg is

00:02:41.001 --> 00:02:43.901
maar we kunnen kijken
zijn er nog meer opties?

00:02:47.145 --> 00:02:50.983
dus dan gaan we ne keer kijken
naar een andere optie

00:02:53.861 --> 00:02:54.861
even kijken

00:03:01.633 --> 00:03:03.454
dus dit was met een lateral

00:03:03.699 --> 00:03:06.302
dit is met een...
zonder lateral

00:03:06.387 --> 00:03:08.243
we gaan die ne keer proberen

00:03:09.449 --> 00:03:10.449
efkes kijken

00:03:16.880 --> 00:03:17.880
ja...

00:03:18.635 --> 00:03:19.635
nu...

00:03:19.911 --> 00:03:23.816
als ik nu lui ben en ik wil snel weten
of dat deze query de juiste query is

00:03:24.092 --> 00:03:25.297
hoe zou ik dat kunnen doen?

00:03:25.498 --> 00:03:28.517
dus euh.... 
die natural ok

00:03:28.922 --> 00:03:32.383
ik zie daar een paar dingen staan
er wordt daar geteld in de subquery

00:03:32.853 --> 00:03:34.053
efkes kijken...

00:03:35.739 --> 00:03:38.200
track
dus dat is deze track

00:03:38.494 --> 00:03:39.785
miliseconden

00:03:39.896 --> 00:03:44.930
dus er wordt hier geteld hoeveel dat 
er zijn die miliseconden minder hebben

00:03:48.568 --> 00:03:51.497
en dat mogen er maximum 2
dus als ik het goed bezie

00:03:52.092 --> 00:03:53.647
wat wordt er hier geteld?

00:03:54.074 --> 00:03:56.156
als ik het snel beschouw

00:03:56.500 --> 00:04:00.933
we tellen hier hoeveel tracks er zijn die
minder miliseconden hebben

00:04:02.687 --> 00:04:05.220
en dat mogen er maximum 1 zijn

00:04:05.245 --> 00:04:06.298
dus wat denk je dan?

00:04:15.997 --> 00:04:19.135
ik ga misschien de vorige query 
er ook even bij halen

00:04:21.943 --> 00:04:25.152
dan zie je deze hier
dus ik vind daar een...

00:04:26.115 --> 00:04:27.990
deze resultaten bijvoorbeeld

00:04:28.067 --> 00:04:31.608
en bij die andere query vind ik
precies toch iets anders

00:04:31.656 --> 00:04:33.542
alhoewel
efkes kijken

00:04:36.569 --> 00:04:37.569
pom pom pom

00:04:49.488 --> 00:04:52.853
ik ben lui bijvoorbeeld en ik ga er van uit
dat die eerste query goed is

00:04:52.878 --> 00:04:54.148
dus wat zou ik kunnen doen?

00:04:56.133 --> 00:04:58.494
ik kan het verschil gaan kijken 
van die queries

00:04:58.828 --> 00:05:01.149
dus ik kan bijvoorbeeld 
die eerste query nemen

00:05:02.704 --> 00:05:04.983
en ik kan dan zeggen van
"kijk..."

00:05:05.867 --> 00:05:06.867
"...accept"

00:05:07.167 --> 00:05:08.645
ik kan het verschil bekijken

00:05:08.975 --> 00:05:13.246
met die andere query
dus die query die daarnet gegeven werdt

00:05:13.596 --> 00:05:17.306
dus
ik ga die nog even terug knippen en plakken

00:05:21.695 --> 00:05:24.645
ik zie dat ik mijn scherm niet goed gedeeld hebt
moment

00:05:28.450 --> 00:05:30.188
dus dat gaan we even aanpassen

00:05:30.774 --> 00:05:31.774
sorry

00:05:31.833 --> 00:05:33.493
dus ik had gezegd van euh

00:05:34.112 --> 00:05:36.072
ik ga dit hier ondertussen even plakken

00:05:44.034 --> 00:05:46.107
dus er was de eerste query van daarnet

00:05:47.218 --> 00:05:50.547
namelijk die met de left lateral join

00:05:52.680 --> 00:05:55.610
die geeft deze resultaat
we hebben daar een bepaald

00:05:56.116 --> 00:06:00.156
kostprijs van genomen
die query was acceptabel qua performantie 
dat was ok

00:06:01.445 --> 00:06:03.584
en dan hebben we een tweede antwoord gekregen

00:06:03.638 --> 00:06:07.559
namelijk natural inner join
met een gecorreleerde subquery

00:06:08.072 --> 00:06:10.892
die geeft mij ook een aantal resultaten

00:06:11.523 --> 00:06:15.030
maar als we deze query even analyzeren
wat zien we dan?

00:06:17.579 --> 00:06:21.508
de conditie is hier: ik ga tellen hoeveel
miliseconden track minder heeft

00:06:21.555 --> 00:06:22.735
en deze track...

00:06:23.535 --> 00:06:25.747
die verwijst naar de track die van hier komt

00:06:25.841 --> 00:06:30.594
en deze t
verwijst naar de t die van hier komt

00:06:31.011 --> 00:06:33.319
dus ik ga hier tellen

00:06:33.344 --> 00:06:37.417
hoeveel tracks er zijn die eigenlijk
minder miliseconden hebben

00:06:37.749 --> 00:06:38.879
dus die korter zijn

00:06:38.904 --> 00:06:44.183
en dat mogen er maximum 1 zijn
maximum 1

00:06:45.144 --> 00:06:47.901
dus ik tel hier hoeveel dat er korter zijn

00:06:47.932 --> 00:06:50.726
en wat moet ik eigenlijk tellen?
ik moet hier tellen hoeveel dat er...

00:06:52.953 --> 00:06:55.066
niet korter zijn maar hoeveel dat er...

00:06:56.658 --> 00:07:02.148
...langer zijn
dus zo moet je inderdaad deze query gaan aanpassen

00:07:04.176 --> 00:07:05.803
dus hoe kon je dat nakijken?

00:07:05.879 --> 00:07:09.256
zoals ik daarstraks aan het uittellen
stel je hebt die twee queries en je twijfelt

00:07:09.409 --> 00:07:14.102
je kan gewoonweg, das een dataset,
je kan deze twee datasets met elkaar vergelijken door

00:07:14.625 --> 00:07:18.892
de twee queries onder mekaar te plakken
zonder de order by en er een except tussen te zetten

00:07:19.056 --> 00:07:22.304
ik wil al die data behalve degene die 
daar voorkomen bijvoorbeeld

00:07:22.615 --> 00:07:25.286
dan krijk ik...
normaal gezien mag ik niks krijgen

00:07:25.553 --> 00:07:26.838
als dat dezelfde queries zijn

00:07:26.863 --> 00:07:29.494
en als ik dat omdraai mag ik normaal gezien
ook niks krijgen

00:07:29.519 --> 00:07:31.459
die twee queries van plaats verwisselen hier

00:07:32.772 --> 00:07:36.466
maar ik krijg hier een hoop data
dus das inderdaad het probeem

00:07:37.267 --> 00:07:39.227
dus als ik deze hier even ga aanpassen

00:07:40.497 --> 00:07:42.468
dan zie je dat ik niks meer krijg

00:07:42.493 --> 00:07:44.933
dus het groter dan/kleiner dan/gelijk teken

00:07:46.639 --> 00:07:50.313
dus daan gaan we even terug naar deze query
die eerst gegeven was

00:07:50.948 --> 00:07:53.952
dus dan moet dan met een
groter dan teken

00:07:54.651 --> 00:07:57.229
en we willen hier ook eens 
de kostprijs van bekijken

00:07:57.477 --> 00:08:00.981
we zullen in een keer ook 
het uitvoertijd vragen

00:08:01.589 --> 00:08:02.589
en wat zien we nu?

00:08:10.163 --> 00:08:15.526
ik krijg hier een kostprijs van
200 tot 211

00:08:16.499 --> 00:08:20.546
ik krijg hier een uitvoeringstijd van
150 miliseconden

00:08:21.413 --> 00:08:25.772
dus die uitvoeringstijd herriner ik mij is al meer 
want daarstraks was het minder dan 50 miliseconden

00:08:25.797 --> 00:08:29.407
maar het plan 
zou wel eens anders kunnen geweest zijn

00:08:29.489 --> 00:08:31.827
dus laten we eens kijken terug naar de vorige

00:08:32.190 --> 00:08:37.200
ik ga toch terug een beetje uitzoomen
dat ik ze misschien alle twee kan tonen

00:08:37.562 --> 00:08:38.922
dus dit is dit plan

00:08:43.054 --> 00:08:44.220
even terug gaan

00:08:45.581 --> 00:08:48.618
dit was het
met de andere plan

00:08:49.566 --> 00:08:50.979
dus deze hier die voert uit

00:08:51.004 --> 00:08:55.631
ondanks het feit dat we hier een grotere kostprijs hebben
hebben we hier een lagere uitvoeringstijd

00:08:57.962 --> 00:09:02.393
en hier heb ik een betere kostprijs
want ik ga maar tot 200

00:09:02.418 --> 00:09:04.045
hier zit ik aan 5000

00:09:05.317 --> 00:09:06.555
maar ik krijg hier wel...

00:09:09.620 --> 00:09:12.247
130 miliseconden waar ik hier 11 had

00:09:12.994 --> 00:09:16.562
dus dat vind ik wel heel interessant
dit soort dingen verwachten wij niet

00:09:16.587 --> 00:09:19.851
wat is er hier nu raar dat je ziet?
wie kan mij dat zeggen?

00:09:20.290 --> 00:09:23.176
dus jullie geven oplossingen
we kijken daarnaar

00:09:24.671 --> 00:09:27.711
ik ga proberen ze op een ding te krijgen terug

00:09:28.778 --> 00:09:29.778
zo

00:09:30.797 --> 00:09:34.491
we hebben dus een query waarbij
dat we dit resultaat hebben

00:09:35.054 --> 00:09:37.785
een we hebben een andere query waarbij 
we dit resultaat hebben

00:09:37.810 --> 00:09:40.367
en wat is er hier nu interessant 
om te zien eigenlijk?

00:09:49.016 --> 00:09:50.196
wat valt er u op?

00:09:53.045 --> 00:09:55.452
das misschien niet evident om te zien

00:09:55.626 --> 00:09:58.833
maar ik zal het dan efjes schematisch
op papier zetten

00:10:06.928 --> 00:10:11.355
dus bij de eerste query hebben we 
een kost van 211

00:10:12.477 --> 00:10:18.668
en een uitvoertijd van
130 miliseconden

00:10:19.158 --> 00:10:26.589
en bij de andere query hebben we 
een kost van 5701 en 11 miliseconden

00:10:30.612 --> 00:10:35.191
ja Ruben inderdaad dus het helpt misschien
wat je daar zegt

00:10:35.397 --> 00:10:39.637
dus als ik even..
oei tis niet aangesloten

00:10:45.935 --> 00:10:46.935
nu wel

00:10:48.792 --> 00:10:52.805
als ik dat even kort schematisch samenvat
dan hebben we hier twee queries

00:10:53.120 --> 00:10:56.109
ene query heeft een kostprijs van 211
totale kostprijs

00:10:56.127 --> 00:10:58.720
de andere eentje die een factor 10
makkelijk groter is

00:10:59.384 --> 00:11:05.098
als ik naar de tijden kijk is deze query trager dan deze
ondanks het feit dat die een lagere kostprijs heeft