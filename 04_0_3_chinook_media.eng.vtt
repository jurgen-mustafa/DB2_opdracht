WEBVTT

00:00:01.046 --> 00:00:02.068
what do we see here?

00:00:02.093 --> 00:00:05.653
so for the question that was asked

00:00:12.262 --> 00:00:15.743
so for each album, give 
the 2 longest tracks

00:00:15.929 --> 00:00:17.196
we are going to search

00:00:18.043 --> 00:00:20.376
for the best performing query

00:00:20.777 --> 00:00:22.677
So that means

00:00:22.923 --> 00:00:25.089
for that first solution
that we have there

00:00:26.629 --> 00:00:28.962
we look at this cost

00:00:28.996 --> 00:00:30.185
So then you actually see

00:00:30.346 --> 00:00:34.009
If you have to summarise it in a number
you always look at the top line

00:00:34.042 --> 00:00:36.453
there were a number of students who 
asked that earlier.

00:00:36.630 --> 00:00:39.518
So the top line gives
the summary of the whole query plan

00:00:39.685 --> 00:00:44.296
The query plan is what the planner/
the opimizer has decided internally from

00:00:44.318 --> 00:00:49.883
with the hardware &amp; memory that I have
with what I know of the table

00:00:50.038 --> 00:00:54.293
I think this is the best way to 
execute this query

00:00:54.436 --> 00:00:56.122
so he describes that here

00:00:56.581 --> 00:00:58.871
the most important number here is 
the last number

00:00:59.044 --> 00:01:01.658
So the 5700 means

00:01:01.892 --> 00:01:04.208
That is the cost to show all data

00:01:04.472 --> 00:01:10.115
and the 16 is the cost of showing 
the first row

00:01:10.527 --> 00:01:12.911
there were people there earlier
so that is the cost

00:01:12.970 --> 00:01:15.665
You can only compare cost prices
on the same database

00:01:15.709 --> 00:01:19.582
because they also depend on parameters 
that you can set on your database

00:01:20.287 --> 00:01:22.371
so then of course you go and look at it like
so yeah

00:01:23.194 --> 00:01:25.510
I also want to show the time

00:01:25.699 --> 00:01:29.455
who else knows the option that
will actually run that query?

00:01:29.691 --> 00:01:32.018
that will also show the time
with that explain?

00:01:35.810 --> 00:01:38.048
yes indeed Arthur
analyze

00:01:40.706 --> 00:01:43.522
So then you get an idea of the time

00:01:43.696 --> 00:01:47.534
what we see here is that time 
is actually quite fast

00:01:47.674 --> 00:01:50.234
so that's 11 milliseconds here.

00:01:51.368 --> 00:01:53.391
I think everything under...

00:01:55.054 --> 00:02:00.304
our eyes work for example if you watch
film than 30 frames per second

00:02:01.803 --> 00:02:06.510
so if it's a thousand milliseconds
we divide that by 30

00:02:07.050 --> 00:02:08.750
and even 20 frames I would say

00:02:08.984 --> 00:02:12.086
anything under 50 milliseconds is actually
to our eyes.

00:02:12.115 --> 00:02:14.271
so then the result is 
still very fast.

00:02:14.296 --> 00:02:16.363
all that is below 50 milliseconds

00:02:16.388 --> 00:02:19.314
so that query is acceptable with
the data that is in there.

00:02:19.436 --> 00:02:22.861
It's not like it says 
"you've got an optimisation problem here".

00:02:25.142 --> 00:02:26.314
what do we see here?

00:02:26.778 --> 00:02:28.876
we see here for example
that the planner

00:02:29.151 --> 00:02:34.238
has 0.2 milliseconds rounded off
and the effective execution is

00:02:34.367 --> 00:02:38.161
those 11 milliseconds so those add up to
12 milliseconds approximately.

00:02:39.030 --> 00:02:40.920
So that's a query that is efficient enough

00:02:41.001 --> 00:02:43.901
but we can check
are there any other options?

00:02:47.145 --> 00:02:50.983
So then we are going to look
for another option.

00:02:53.861 --> 00:02:54.861
let's see

00:03:01.633 --> 00:03:03.454
So this was with a lateral

00:03:03.699 --> 00:03:06.302
This is with a...
without lateral

00:03:06.387 --> 00:03:08.243
we are going to try that one

00:03:09.449 --> 00:03:10.449
let's have a look

00:03:16.880 --> 00:03:17.880
yes...

00:03:18.635 --> 00:03:19.635
now...

00:03:19.911 --> 00:03:23.816
If I'm lazy and I want to know quickly
whether this query is the right query

00:03:24.092 --> 00:03:25.297
how could I do that?

00:03:25.498 --> 00:03:28.517
so euh.... 
that natural ok

00:03:28.922 --> 00:03:32.383
I see a few things there
there is a counting in the subquery there

00:03:32.853 --> 00:03:34.053
let's see...

00:03:35.739 --> 00:03:38.200
track
so that is this track

00:03:38.494 --> 00:03:39.785
milliseconds

00:03:39.896 --> 00:03:44.930
So there is a count here of how many 
there are who have less miliseconds

00:03:48.568 --> 00:03:51.497
and that should be a maximum of 2
so if I look at it correctly

00:03:52.092 --> 00:03:53.647
what is being counted here?

00:03:54.074 --> 00:03:56.156
if i look at it quickly

00:03:56.500 --> 00:04:00.933
we are counting here how many tracks there are that have
have fewer milliseconds.

00:04:02.687 --> 00:04:05.220
and there may be a maximum of 1

00:04:05.245 --> 00:04:06.298
so what do you think?

00:04:15.997 --> 00:04:19.135
I'll pull up the previous query 
query as well.

00:04:21.943 --> 00:04:25.152
then you see this one here
so there I find a...

00:04:26.115 --> 00:04:27.990
these results for example

00:04:28.067 --> 00:04:31.608
and with the other query I find
something else apparently

00:04:31.656 --> 00:04:33.542
although
let's see

00:04:36.569 --> 00:04:37.569
pom pom pom

00:04:49.488 --> 00:04:52.853
I'll be lazy and assume
that the first query is good

00:04:52.878 --> 00:04:54.148
so what could I do?

00:04:56.133 --> 00:04:58.494
i can see the difference 
of those queries

00:04:58.828 --> 00:05:01.149
so I can, for example 
take that first query

00:05:02.704 --> 00:05:04.983
and I can say
"look..."

00:05:05.867 --> 00:05:06.867
"...accept."

00:05:07.167 --> 00:05:08.645
I can see the difference

00:05:08.975 --> 00:05:13.246
with that other query
the query that was given a short while ago

00:05:13.596 --> 00:05:17.306
so
I'm going to cut and paste that back

00:05:21.695 --> 00:05:24.645
I see I did not share my screen properly
moment

00:05:28.450 --> 00:05:30.188
So we are going to adjust that.

00:05:30.774 --> 00:05:31.774
sorry

00:05:31.833 --> 00:05:33.493
so I said, euh

00:05:34.112 --> 00:05:36.072
I'm going to paste this here in the meantime

00:05:44.034 --> 00:05:46.107
so there was the first query from earlier

00:05:47.218 --> 00:05:50.547
namely the one with the left lateral join

00:05:52.680 --> 00:05:55.610
that gives this result
we have taken

00:05:56.116 --> 00:06:00.156
a certain cost of it
That query was acceptable in terms of performance. 
that was ok

00:06:01.445 --> 00:06:03.584
and then we got a second answer

00:06:03.638 --> 00:06:07.559
namely natural inner join
with a correlated subquery

00:06:08.072 --> 00:06:10.892
which also gives me some results

00:06:11.523 --> 00:06:15.030
but if we analyse this query
what do we see?

00:06:17.579 --> 00:06:21.508
the condition here is: i'm going to count how many
milliseconds less track has

00:06:21.555 --> 00:06:22.735
and this track...

00:06:23.535 --> 00:06:25.747
that refers to the track that comes from here

00:06:25.841 --> 00:06:30.594
and this t
refers to the t that comes from here

00:06:31.011 --> 00:06:33.319
so I am going to count here

00:06:33.344 --> 00:06:37.417
how many tracks there are that actually
have fewer milliseconds

00:06:37.749 --> 00:06:38.879
so that are shorter

00:06:38.904 --> 00:06:44.183
and there may be a maximum of 1
maximum 1

00:06:45.144 --> 00:06:47.901
so I'm counting here how many that are shorter

00:06:47.932 --> 00:06:50.726
And what am I supposed to count?
I have to count here how many are...

00:06:52.953 --> 00:06:55.066
not shorter, but how many are...

00:06:56.658 --> 00:07:02.148
...longer
so that's how you have to adjust this query

00:07:04.176 --> 00:07:05.803
so how could I check that?

00:07:05.879 --> 00:07:09.256
as I was counting out just now
suppose you have those two queries and you're not sure

00:07:09.409 --> 00:07:14.102
you can just, it's a dataset,
you can compare these two datasets by

00:07:14.625 --> 00:07:18.892
pasting the two queries underneath each other
without the order by and by inserting an except

00:07:19.056 --> 00:07:22.304
I want all the data except for the ones 
that are present there, for example

00:07:22.615 --> 00:07:25.286
then I get...
normally I am not allowed to get anything

00:07:25.553 --> 00:07:26.838
If they are the same queries

00:07:26.863 --> 00:07:29.494
and if I turn that around I should normally
get nothing either

00:07:29.519 --> 00:07:31.459
if I swap those two queries here

00:07:32.772 --> 00:07:36.466
but i get a lot of data here
so that is indeed a problem

00:07:37.267 --> 00:07:39.227
So if I just adjust this here

00:07:40.497 --> 00:07:42.468
then you see I get nothing

00:07:42.493 --> 00:07:44.933
so the bigger than/smaller than/equal sign

00:07:46.639 --> 00:07:50.313
so then we go back to this query
that was given first

00:07:50.948 --> 00:07:53.952
so then we have to use a
greater than sign

00:07:54.651 --> 00:07:57.229
and we also want to 
look at the cost of this

00:07:57.477 --> 00:08:00.981
we will also ask 
the execution time at the same time

00:08:01.589 --> 00:08:02.589
and what do we see now?

00:08:10.163 --> 00:08:15.526
i get a cost here of
200 to 211

00:08:16.499 --> 00:08:20.546
I get an execution time of
150 milliseconds

00:08:21.413 --> 00:08:25.772
So that execution time I remember is already more 
because a moment ago it was less than 50 milliseconds.

00:08:25.797 --> 00:08:29.407
But the plan 
might have been different.

00:08:29.489 --> 00:08:31.827
so let's look back at the previous one

00:08:32.190 --> 00:08:37.200
I'm going to zoom out a little bit
that I can show both of them

00:08:37.562 --> 00:08:38.922
so this is the plan

00:08:43.054 --> 00:08:44.220
let's go back a bit

00:08:45.581 --> 00:08:48.618
This was it
with the other plan

00:08:49.566 --> 00:08:50.979
So this one here that executes

00:08:51.004 --> 00:08:55.631
despite the fact that we have a higher cost here
we have a lower execution time here

00:08:57.962 --> 00:09:02.393
and here I have a better cost
because I only go up to 200

00:09:02.418 --> 00:09:04.045
here I am at 5000

00:09:05.317 --> 00:09:06.555
but here i get...

00:09:09.620 --> 00:09:12.247
130 milliseconds where I had 11 here.

00:09:12.994 --> 00:09:16.562
So I find that very interesting.
We don't expect this kind of thing

00:09:16.587 --> 00:09:19.851
what is it that you see here that is strange?
who can tell me?

00:09:20.290 --> 00:09:23.176
so you give solutions
we look into it

00:09:24.671 --> 00:09:27.711
I'm going to try to get them to do one thing again.

00:09:28.778 --> 00:09:29.778
so

00:09:30.797 --> 00:09:34.491
So we have a query where
we have this result

00:09:35.054 --> 00:09:37.785
and we have another query where 
we have this result

00:09:37.810 --> 00:09:40.367
And what's interesting 
to see here?

00:09:49.016 --> 00:09:50.196
what do you notice?

00:09:53.045 --> 00:09:55.452
that may not be obvious to see

00:09:55.626 --> 00:09:58.833
so i'll put it down schematically
on paper

00:10:06.928 --> 00:10:11.355
So with the first query we have 
a cost of 211

00:10:12.477 --> 00:10:18.668
and an execution time of
130 milliseconds

00:10:19.158 --> 00:10:26.589
And for the other query we have 
a cost of 5701 and 11 milliseconds.

00:10:30.612 --> 00:10:35.191
Yes Ruben indeed so it might help
what you say there

00:10:35.397 --> 00:10:39.637
So if I could just...
oops it's not connected

00:10:45.935 --> 00:10:46.935
now it is

00:10:48.792 --> 00:10:52.805
If I summarise this briefly
we have two queries here

00:10:53.120 --> 00:10:56.109
One query has a cost of 211
total cost

00:10:56.127 --> 00:10:58.720
The other one is easily greater 
by a factor of 10

00:10:59.384 --> 00:11:05.098
When I look at the times, this query is slower than this one
despite the fact that it has a lower cost

00:11:05.536 --> 00:11:07.296
So if you plot that on a graph

00:11:07.516 --> 00:11:10.069
what you expect is the following:

00:11:10.336 --> 00:11:14.872
If this is the cost price and this is the execution time

00:11:15.008 --> 00:11:19.888
then if the cost price is low you would expect 
a low execution time

00:11:19.913 --> 00:11:22.007
and at a high cost price a high execution time.

00:11:22.320 --> 00:11:25.153
What happened here now?

00:11:29.185 --> 00:11:32.718
For 211 for example, we find a cost...

00:11:32.825 --> 00:11:36.662
So for a cost of 211 I find a

00:11:38.701 --> 00:11:39.701
Uh sorry

00:11:39.780 --> 00:11:41.419
I have the...

00:11:43.473 --> 00:11:44.473
Yes...

00:11:45.137 --> 00:11:47.901
So for a cost
of 211 I'm here

00:11:47.925 --> 00:11:50.697
and then I have an
execution time of 130 ms

00:11:50.708 --> 00:11:54.293
And for a cost of
5000 I'm here with 11 seconds.

00:11:54.317 --> 00:11:57.479
So I'm here, what I
didn't expect, which is very strange.

00:11:57.511 --> 00:11:59.536
Does anybody have a
possible explanation for that?

00:11:59.560 --> 00:12:02.199
There are several
possible explanations.

00:12:04.131 --> 00:12:06.776
Why it is actually declining,

00:12:06.800 --> 00:12:09.807
where that you would expect that it
could be increasing.

00:12:19.099 --> 00:12:23.439
We expect a low cost and a
low time. A high cost

00:12:23.464 --> 00:12:26.693
and a higher execution time, but
here it's just the opposite,

00:12:26.718 --> 00:12:32.798
so what are possible
reasons that it's like this now?

00:12:33.257 --> 00:12:34.840
It could be an exception
you say

00:12:34.865 --> 00:12:37.482
It found quickly
what it needed...

00:12:37.526 --> 00:12:39.465
 Yes... Yes

00:12:44.282 --> 00:12:46.208
Rik is already coming closer... Caching !

00:12:46.249 --> 00:12:51.790
But caching? In a way
the same tables are retrieved I think...

00:12:52.339 --> 00:12:56.722
It's about the same
tables, so I expect in the

00:12:56.747 --> 00:13:01.235
cache that the 2nd query
that executes,  has benefit

00:13:01.260 --> 00:13:04.786
because then there might
already been cached more by then.

00:13:05.626 --> 00:13:08.616
But caching does give
a certain indication though...

00:13:08.623 --> 00:13:12.207
A certain hint for what
might be going on.

00:13:16.714 --> 00:13:20.940
What else has a
impact on the execution time?

00:13:21.508 --> 00:13:25.787
Remember we talked about transactions 
in the 1st semester

00:13:25.789 --> 00:13:27.626
Why did we talk about transactions?

00:13:27.640 --> 00:13:32.248
Why do we need transactions
when we are working in a database?

00:13:52.298 --> 00:13:53.437
I'll put it in another way...

00:13:53.445 --> 00:14:00.321
Do you remember an example of a
problem you could have with transactions?

00:14:04.786 --> 00:14:06.706
Multiple users, indeed Philippe!

00:14:06.713 --> 00:14:09.862
We have several users on the same system, so

00:14:09.887 --> 00:14:13.984
the cost price is a
theoretical value that your planner calculates.

00:14:14.008 --> 00:14:15.510
That is a fixed value.

00:14:15.610 --> 00:14:21.279
But your execution time also depends on the
load on the system at that time.

00:14:21.781 --> 00:14:24.400
It may well be that a
small difference in load,

00:14:24.424 --> 00:14:27.211
where at that time that
server is doing other things....

00:14:27.236 --> 00:14:28.996
(that's a concrete physical machine) ...

00:14:29.020 --> 00:14:31.761
which gives you a
different execution time.

00:14:31.857 --> 00:14:34.123
Something else that you also have is

00:14:34.637 --> 00:14:36.317
In addition to the physical system

00:14:36.600 --> 00:14:38.873
there are also people here from
other specialisations

00:14:38.898 --> 00:14:41.370
We have 3 different specialisations.
This is an answer

00:14:41.394 --> 00:14:43.760
for 1 of the
directions I would say.

00:14:44.385 --> 00:14:48.718
I'm sitting here at home and
there I'm running the query,

00:14:48.871 --> 00:14:52.352
So what could be another
explanation...

00:14:58.667 --> 00:15:01.581
By which I see a difference
in execution time?

00:15:03.476 --> 00:15:05.329
Yes indeed the network here.

00:15:05.350 --> 00:15:10.111
So the network can also have its
influence there of course.

00:15:10.692 --> 00:15:13.593
So  on the one hand we have the physical
machine and on the other hand the network. So

00:15:13.618 --> 00:15:17.054
don't limit yourself to what you
see, always think a little wider guys.

00:15:17.946 --> 00:15:23.563
And one last statement, you can
maybe think of others, is that

00:15:23.587 --> 00:15:26.946
possibly the planner is actually making an incorrect
estimate.

00:15:27.013 --> 00:15:28.313
That happens sometimes too.

00:15:28.406 --> 00:15:32.960
That's also a piece of software that
the planning estimates like look...

00:15:32.985 --> 00:15:38.412
for me the cost here at this query is so
big

00:15:38.437 --> 00:15:41.019
but actually in
practice it's smaller

00:15:41.984 --> 00:15:45.328
He underestimates himself
with his planning there.

00:15:45.353 --> 00:15:46.925
So that could
therefore also be another reason.

00:15:46.950 --> 00:15:48.944
So you have a lot of
different reasons.

00:15:48.969 --> 00:15:51.622
So the moral of the story is
actually...

00:15:51.916 --> 00:15:53.942
If you can, just put that ANALYZE in there.

00:15:54.083 --> 00:15:55.786
before the effective execution.

00:15:55.811 --> 00:15:57.686
Unless
it is too heavy to execute or there

00:15:57.711 --> 00:16:00.497
is a DML, an insert, update and
delete involved.

00:16:00.704 --> 00:16:03.439
Then of course you have to be careful
that you don't start modifying data

00:16:03.465 --> 00:16:06.098
when that wouldn't be the intention.

00:16:06.325 --> 00:16:11.135
And run that multiple times.  And if we
execute something multiple times,

00:16:11.236 --> 00:16:14.539
then we could
actually be able to keep track of all those timings.

00:16:14.571 --> 00:16:16.329
That cost price isn't going to change.

00:16:16.354 --> 00:16:19.427
but we could keep track of 
those timing.

00:16:19.467 --> 00:16:21.853
and then what could we do
with those execution times?

00:16:23.286 --> 00:16:26.716
Then I refer back
to the people who already had

00:16:26.741 --> 00:16:29.303
operational analysis this week.

00:16:36.385 --> 00:16:38.918
If I have multiple timings
of the same query.

00:16:38.932 --> 00:16:39.935
What could I do?

00:16:39.949 --> 00:16:43.853
For the people who
got statistics last semester?

00:16:50.253 --> 00:16:51.799
Calculating an average...

00:16:51.933 --> 00:16:54.952
And to take it a step further Milan?

00:16:55.219 --> 00:16:58.547
Because usually there is a
certain uncertainty on...

00:17:08.859 --> 00:17:11.748
If you're going to look a little bit to the left
and to the right of your average....

00:17:12.902 --> 00:17:15.174
A confidence interval, indeed yes.

00:17:15.201 --> 00:17:17.219
Standard deviation
or confidence interval.

00:17:17.244 --> 00:17:19.641
So you could
write a little loop of....

00:17:19.666 --> 00:17:21.952
We're going to run that query
so many times... Or in a cronjob.

00:17:21.977 --> 00:17:24.547
And we write the explain plan away somewhere

00:17:24.626 --> 00:17:26.928
and you calculate
the confidence interval on that.

00:17:26.953 --> 00:17:28.399
And so you get a better
idea of...

00:17:28.424 --> 00:17:32.029
What is the situation here
instead of 1 snapshot.

00:17:32.050 --> 00:17:34.113
Because that cost is indeed not going to
change...

00:17:34.120 --> 00:17:35.800
But those timings there?

00:17:38.417 --> 00:17:46.412
[No useful information]

00:17:48.381 --> 00:17:50.301
So those are
interesting points he guys.

00:17:50.341 --> 00:17:52.430
I don't expect euhm...

00:17:53.944 --> 00:17:55.384
This is already very detailed

00:17:55.750 --> 00:18:00.119
So this here is actually
for the high marks.

00:18:00.167 --> 00:18:03.342
I'm already happy that you guys can
work towards performance with the explain...

00:18:03.367 --> 00:18:07.632
with the costings
be able to write more performant queries...

00:18:07.700 --> 00:18:13.755
realize that things
like index scanning are important

00:18:13.762 --> 00:18:17.145
Or that it can often improve a process.

00:18:19.844 --> 00:18:22.270
I think it would be
interesting to know.

00:18:22.297 --> 00:18:26.218
There's another piece
that I can show you I think in this context.

00:18:26.238 --> 00:18:31.306
Then I think about the
people who are more on the system side.

00:18:32.870 --> 00:18:35.249
So I can also ask, for example, from....

00:18:35.276 --> 00:18:36.329
How is it actually?

00:18:36.336 --> 00:18:38.869
A moment ago, someone was talking about caching...

00:18:39.207 --> 00:18:41.274
And give you the option of buffers

00:18:41.287 --> 00:18:46.901
So then you can look at what is
effectively coming out of a cache.

00:18:46.975 --> 00:18:50.431
So what I see is the same 
query plan that we saw before.

00:18:50.667 --> 00:18:53.200
We have a
similar time there.

00:18:53.359 --> 00:18:56.889
Here it says Buffers: shared hit= 3 ...

00:18:57.223 --> 00:19:00.236
So that means for
this sequential scan it actually has

00:19:00.260 --> 00:19:03.214

been able to get everything out of the memory

00:19:04.490 --> 00:19:08.394
For this query there is
also Buffers: shared hit=so much ...

00:19:08.950 --> 00:19:12.406
So this was able to get 
everything out of memory as well.

00:19:13.210 --> 00:19:17.728
Otherwise, there is something about dirtied
Or you find any other values with that.

00:19:17.875 --> 00:19:21.055
Here you can even find the method that he
used with

00:19:21.080 --> 00:19:23.219
the memory
that is available, it is "Quicksort"

00:19:23.233 --> 00:19:25.066
I don't know if
you recognize quicksort.

00:19:25.093 --> 00:19:28.997
We saw
sorting algorithms in the first year.

00:19:30.097 --> 00:19:35.425
What do you remember about quicksort
When you think back to the 1st year?

00:19:43.917 --> 00:19:47.514
Therefore, you don't have to remember the algorithm
anymore, but this is about performance.

00:19:47.539 --> 00:19:49.836
you've seen
different sorting algorithms,

00:19:49.861 --> 00:19:54.257
maybe you know any
other sorting algorithms from back then?

00:20:09.417 --> 00:20:11.097
It has been a while no?

00:20:13.361 --> 00:20:14.434
The sorting he...

00:20:14.467 --> 00:20:15.472
Sorting algorithms:

00:20:15.493 --> 00:20:17.869
One was quicksort, which was
a recursive algorithm,

00:20:17.894 --> 00:20:20.607
which means that
it did dare to use some memory

00:20:20.667 --> 00:20:24.402
But it was actually a very
performing algorithm, it was very fast.

00:20:24.489 --> 00:20:27.945
One variant that
was also kind of fast was the bubble sort.

00:20:27.950 --> 00:20:31.516
But you also had slower
algorithms like the mergesort and so on.

00:20:31.530 --> 00:20:35.783
Basically, the planner, depending on 
the data available in the memory,

00:20:35.823 --> 00:20:37.995
will choose his
sorting algorithm.

00:20:38.029 --> 00:20:43.981
So here I like to see that quicksort because
I know that's a fast sorting algorithm.

00:20:44.416 --> 00:20:45.696
So that's good.

00:20:45.968 --> 00:20:47.729
If there is a different sorting algorithm there....

00:20:47.754 --> 00:20:50.150
then maybe it's
because it doesn't have enough memory to

00:20:50.175 --> 00:20:52.557
execute the sorting procedure,
so that it falls back on another one.

00:20:52.582 --> 00:20:54.524
So that's all interesting

00:20:55.097 --> 00:20:57.083
So that's how you get
some more information.

00:20:57.104 --> 00:21:01.712
At the moment there's no data coming
from the disk, but from the memory.

00:21:01.824 --> 00:21:02.944
Why is that?

00:21:02.964 --> 00:21:05.560
Because all of us consulted 
that table on the exact same database

00:21:05.584 --> 00:21:08.092
so in the meantime it's been cached.

00:21:08.105 --> 00:21:11.881
Maybe we can
do that with the other query as well.

00:21:18.508 --> 00:21:19.508
Yeah...

00:21:20.061 --> 00:21:22.461
So here you see some other things already.

00:21:22.572 --> 00:21:25.830
Then you see that 
we're going to use that quicksort again.

00:21:26.207 --> 00:21:29.307
We are still left with a cost that is
higher here,

00:21:29.314 --> 00:21:33.740
so something makes me wonder that
possibly the query plan could be a coincidence.

00:21:33.780 --> 00:21:35.980
So it has to execute very often.

00:21:39.480 --> 00:21:41.546
Then I'm going to take a look further...

00:21:41.986 --> 00:21:44.646
So here are all
similar things.

00:21:44.760 --> 00:21:49.688
Hash Join I also like to see listed, this
is usually faster than a nested loop.

00:21:51.777 --> 00:21:56.358
Buckets, you can actually
compare to pages or blocks.

00:21:56.378 --> 00:21:59.613
So how many he
needed there for his hash

00:21:59.626 --> 00:22:02.027
he apparently needed that many
memory

00:22:02.051 --> 00:22:04.766
for the hash
join to then start executing.

00:22:05.297 --> 00:22:06.297
Okay...

00:22:06.784 --> 00:22:09.689
All right that's a little more information on that.

00:22:09.930 --> 00:22:14.117
Those other queries, I think those
are also good that you guys have put in chat.

00:22:14.137 --> 00:22:17.120
We'll check them out...

