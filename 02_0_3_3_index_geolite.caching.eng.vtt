WEBVTT

STYLE
::cue { color: red; }

1
00:00:00.000 --> 00:00:05.500
So the question is: we have that Geolite
We have indexes there, possibly that exist

2
00:00:05.500 --> 00:00:11.500
The structure of those tables, is there a relationship between those tables?
If we know a little bit about how it's structured.

3
00:00:11.500 --> 00:00:17.000
Then we can start thinking of, certain queries we can 
then start executing

4
00:00:17.000 --> 00:00:22.500
So for that, of course, I need a new connection

5
00:00:22.500 --> 00:00:26.000
That's going to be on that port 54321

6
00:00:32.500 --> 00:00:43.000
That geolite is a, I don't need it,
That's a gis database if I remember correctly.

7
00:00:43.500 --> 00:00:51.000
Yes, so you connect to 54321 and then to gis database

8
00:00:51.000 --> 00:00:55.000
Then here we have that geolite

9
00:00:57.000 --> 00:01:07.000
Our tables, and then we see: it is in the table blocks 
about a range and a location id, iprange

10
00:01:07.000 --> 00:01:18.000
And with location it's about more information namely:
A location id, that country, that region city and so on.

11
00:01:18.000 --> 00:01:26.000
So maybe take a look if we open up a 
query window here

12
00:01:35.000 --> 00:01:42.000
So what is the structure of the tables, which we see here,
constraints on the first table apparently no

13
00:01:42.000 --> 00:01:48.000
And at the second table only a location primary key

14
00:01:48.000 --> 00:01:52.000
So that means that on locid there is a primary key here

15
00:01:52.000 --> 00:01:55.000
In that other table, there are apparently no constraints

16
00:01:55.000 --> 00:02:03.000
So that locid is obviously a foreign key to this, a reference
but it's not enforced it's raw data that we use there

17
00:02:07.000 --> 00:02:19.000
So show the information for location 244

18
00:02:19.000 --> 00:02:23.000
First set up a search path

19
00:02:35.000 --> 00:02:45.000
The table is location and the location id was 244

20
00:02:46.000 --> 00:02:58.000
So we run that query, I made a missing somewhere,
let's see, search path to geolite, am I in the right database?

22
00:03:23.000 --> 00:03:28.000
Let's see, if I have a typo then of course I could do it like this

23
00:03:30.000 --> 00:03:33.000
Query looking

24
00:03:33.000 --> 00:03:39.000
Is look what is there explicitly specified

25
00:03:39.000 --> 00:03:48.000
Did I make a typo there? no way
But we shall see

26
00:03:53.000 --> 00:03:58.000
So we find those dates back here, yeah okay

27
00:03:58.000 --> 00:04:03.000
Another question that was asked was

28
00:04:05.500 --> 00:04:14.500
We got that one for 244, that went pretty fast if you will
So that took a second

29
00:04:16.000 --> 00:04:21.500
Querying that query took 1 second approximately

30
00:04:22.000 --> 00:04:26.500
Indeed, I think the search path wasn't executed just then with the selection, that's right

31
00:04:26.500 --> 00:04:32.000
So this is waiting a while, but still okay

32
00:04:33.000 --> 00:04:37.000
Now we are going to do another query namely

33
00:04:38.000 --> 00:04:42.000
If I go a little lower in the assignment  

34
00:04:46.000 --> 00:04:53.000
Show all rows with 'Cape Town' so Cape Town is obviously a city
That's going to be another column

35
00:04:53.000 --> 00:04:58.000  color: #00FF00
The intention is to use that one now

36
00:05:03.000 --> 00:05:18.000  color: #00FF00
So I take the same query roughly but I say now: 
city which is 'Cape Town'

37
00:05:22.000 --> 00:05:29.000  color: #00FF00
This query takes a little longer

38
00:05:30.000 --> 00:05:36.000  color: #00FF00
But also not excessively longer, if you say look you'll find 299 rows here 
that took a bit longer

39
00:05:36.000 --> 00:05:47.000
Initially if I were to start this database fresh now then
it would be a bigger difference

40
00:05:47.000 --> 00:05:50.000
I don't know if any students understand why by now?

41
00:05:50.000 --> 00:05:58.000
I will have a look
At 1 of the questions is also how many rows are in this table

42
00:06:14.000 --> 00:06:25.000
Then we see that there are almost a million rows in here, yes 
almost a million rows, 800000 rows 

43
00:06:25.000 --> 00:06:36.000
But in a way those queries go pretty fast, so what's the reason here?
Then when I go to look back at the assignment, it's actually about caching

44
00:06:36.000 --> 00:06:45.000
So what does that mean? By default indexes are very good but on the one field locationid there was an index and that query was fast

45
00:06:45.000 --> 00:06:51.000
On the other field city there was no index but that query was also quite fast

46
00:06:51.000 --> 00:06:56.000
So what are these indexes for you might think? That, of course, has to do with:

47
00:06:56.000 --> 00:06:59.500
How big is your table relative to how much can be cached in memory?

48
00:07:00.000 --> 00:07:09.000
And then you have different types of cach, you have on the one side the cach 
of your hardware, you have no control over that 

49
00:07:09.000 --> 00:07:16.000
So then you would have to turn the machine off cold, and when it's cold, turn off and turn on that that cache is empty for example

50
00:07:16.000 --> 00:07:23.000
You have your operating system cach which you also have no control over which is also going to do caching

51
00:07:23.000 --> 00:07:30.000
That is, load it into memory, because it thinks that its pieces are that are going to be requested frequently 

52
00:07:30.000 --> 00:07:34.000
And then you have the cache of the database, you have a small influence on that , you can reset that 

53
00:07:34.000 --> 00:07:38.000
But so there are actually 3 forms of cach that actually make sure of that data being 

54
00:07:38.000 --> 00:07:45.000
We need may already be in memory so that that query executes quickly anyway

55
00:07:45.000 --> 00:07:52.000
That is, someone else has also run that query or someone has also already accessed that table location and retrieved data from it

56
00:07:52.000 --> 00:08:00.000
Whereby those pages normally only on disk are already cached somewhere, so that those data come back quickly.

57
00:08:00.000 --> 00:08:07.000
It's not so much the queries that are cached but the pages that contain the data of the tables we're looking up

58
00:08:08.000 --> 00:08:13.500
So that's for that question, then I think we're going to finish here today and then we'll do further next time 